import { SimliClient } from 'simli-client';

interface SimliAvatarConfig {
  apiKey: string;
  faceId: string;
  videoElement: HTMLVideoElement;
  audioElement: HTMLAudioElement;
}

export class SimliAvatar {
  private simliClient: SimliClient | null = null;
  private isConnected = false;
  private config: SimliAvatarConfig;

  constructor(config: SimliAvatarConfig) {
    this.config = config;
  }

  async initialize(): Promise<void> {
    try {
      // Initialize Simli client with proper configuration
      this.simliClient = new SimliClient();
      
      const simliConfig = {
        apiKey: this.config.apiKey,
        faceID: this.config.faceId,
        handleSilence: true,
        maxSessionLength: 3600, // 1 hour
        maxIdleTime: 600, // 10 minutes
        session_token: "", // Will be generated by the client
        videoRef: this.config.videoElement,
        audioRef: this.config.audioElement,
        enableConsoleLogs: true,
        SimliURL: "", // Will use default
        maxRetryAttempts: 100,
        retryDelay_ms: 500,
        model: "fasttalk" as const
      };
      
      // Initialize with configuration
      this.simliClient.Initialize(simliConfig);
      
      // Set up event listeners
      this.setupEventListeners();
      
      console.log('Simli avatar initialized successfully');
    } catch (error) {
      console.error('Failed to initialize Simli avatar:', error);
      throw error;
    }
  }

  private setupEventListeners(): void {
    if (!this.simliClient) return;

    this.simliClient.on('connected', () => {
      console.log('Simli avatar connected');
      this.isConnected = true;
      this.onConnectionStatusChange?.(true);
    });

    this.simliClient.on('disconnected', () => {
      console.log('Simli avatar disconnected');
      this.isConnected = false;
      this.onConnectionStatusChange?.(false);
    });

    this.simliClient.on('failed', (error: any) => {
      console.error('Simli avatar connection failed:', error);
      this.isConnected = false;
      this.onConnectionStatusChange?.(false);
      this.onError?.(error);
    });
  }

  async start(): Promise<void> {
    if (!this.simliClient) {
      throw new Error('Simli client not initialized');
    }

    try {
      // Start the Simli client connection
      await this.simliClient.start();
      console.log('Simli avatar started');
    } catch (error) {
      console.error('Failed to start Simli avatar:', error);
      throw error;
    }
  }

  async stop(): Promise<void> {
    if (!this.simliClient) return;

    try {
      await this.simliClient.close();
      this.isConnected = false;
      console.log('Simli avatar stopped');
    } catch (error) {
      console.error('Failed to stop Simli avatar:', error);
      throw error;
    }
  }

  async sendAudioData(audioData: ArrayBuffer): Promise<void> {
    if (!this.simliClient || !this.isConnected) {
      console.warn('Simli client not connected, cannot send audio data');
      return;
    }

    try {
      // Convert ArrayBuffer to Uint8Array for Simli
      const uint8Data = new Uint8Array(audioData);
      await this.simliClient.sendAudioData(uint8Data);
    } catch (error) {
      console.error('Failed to send audio data to Simli:', error);
    }
  }

  // Method to handle audio stream from OpenAI Realtime API
  listenToMediaStream(mediaStream: MediaStream): void {
    if (!this.simliClient || !this.isConnected) {
      console.warn('Simli client not connected, cannot listen to media stream');
      return;
    }

    try {
      this.simliClient.listenToMediastreamTrack(mediaStream.getAudioTracks()[0]);
      console.log('Simli avatar now listening to media stream');
    } catch (error) {
      console.error('Failed to connect media stream to Simli:', error);
    }
  }

  getConnectionStatus(): boolean {
    return this.isConnected;
  }

  // Event handlers (can be set from outside)
  onConnectionStatusChange?: (connected: boolean) => void;
  onError?: (error: any) => void;
}

// Factory function to create and initialize avatar
export async function createSimliAvatar(
  apiKey: string,
  faceId: string,
  videoElement: HTMLVideoElement,
  audioElement: HTMLAudioElement
): Promise<SimliAvatar> {
  const avatar = new SimliAvatar({
    apiKey,
    faceId,
    videoElement,
    audioElement,
  });

  await avatar.initialize();
  return avatar;
}